list_dist_mat_bru = list_dist_mat_bru[-which(sapply(list_dist_mat_bru, is.na))]
list_dist_mat_bru
capture.output(list_dist_mat_bru, file = "./output/list_dist_mat_bru.txt")
length(list_dist_mat_ed) / dim(df_ed_sheeran)[1]
length(list_dist_mat_bey) / dim(df_beyonce)[1]
length(list_dist_mat_cold) / dim(df_cold)[1]
length(list_dist_mat_mar) / dim(df_mar)[1]
length(list_dist_mat_bru) / dim(df_bru)[1]
# mean_mat_ed <- matrix(0, nrow = 3, ncol = 3, dimnames = list(c("-1","0","1"), c("-1","0","1")))
#
# for (mat in 1:length(list_markov_fits_ed)){
#       mean_mat_ed = mean_mat_ed + list_markov_fits_ed[[mat]]
# }
#
# mean_mat_ed <- mean_mat_ed/length(list_markov_fits_ed)
# mean_mat_ed
# capture.output(mean_mat_ed, file = "./output/mean_mat_ed.txt")
# list(list_markov_fits_ed[[1]], list_markov_fits_ed[[2]])
# list_markov_fits_bey_clean = list_markov_fits_bey[-which(sapply(list_markov_fits_bey, dim != c(3, 3)))]
# mean_mat_bey <- Reduce('+', list_markov_fits_bey) / length(list_markov_fits_bey)
# mean_mat_bey
# mean_mat_mar <- matrix(0, nrow = 3, ncol = 3, dimnames = list(c("-1","0","1"), c("-1","0","1")))
#
# for (mat in 1:length(list_markov_fits_mar)){
#       mean_mat_mar = mean_mat_mar + list_markov_fits_mar[[mat]]
# }
# mean_mat_mar <- mean_mat_mar/length(list_markov_fits_mar)
# mean_mat_mar
# capture.output(mean_mat_cold, file = "./output/mean_mat_mar.txt")
library(plotly)
carrots <- data.frame(length = rnorm(100000, 6, 2))
cukes <- data.frame(length = rnorm(50000, 7, 2.5))
#Now, combine your two dataframes into one.  First make a new column in each.
carrots$veg <- 'carrot'
cukes$veg <- 'cuke'
#and combine into your new data frame vegLengths
vegLengths <- rbind(carrots, cukes)
#now make your lovely plot
p <- ggplot(vegLengths, aes(length, fill = veg)) + geom_density(alpha = 0.2)
p <- ggplotly(p)
devtools::install_github('hadley/ggplot2')
# devtools::install_github('hadley/ggplot2') # uncomment and run code to install the dev version of ggplot2.
library(plotly)
carrots <- data.frame(length = rnorm(100000, 6, 2))
cukes <- data.frame(length = rnorm(50000, 7, 2.5))
#Now, combine your two dataframes into one.  First make a new column in each.
carrots$veg <- 'carrot'
cukes$veg <- 'cuke'
#and combine into your new data frame vegLengths
vegLengths <- rbind(carrots, cukes)
#now make your lovely plot
p <- ggplot(vegLengths, aes(length, fill = veg)) + geom_density(alpha = 0.2)
p <- ggplotly(p)
knitr::opts_chunk$set(echo = TRUE)
# devtools::install_github('hadley/ggplot2') # uncomment and run code to install the dev version of ggplot2.
library(plotly)
carrots <- data.frame(length = rnorm(100000, 6, 2))
cukes <- data.frame(length = rnorm(50000, 7, 2.5))
#Now, combine your two dataframes into one.  First make a new column in each.
carrots$veg <- 'carrot'
cukes$veg <- 'cuke'
#and combine into your new data frame vegLengths
vegLengths <- rbind(carrots, cukes)
#now make your lovely plot
p <- ggplot(vegLengths, aes(length, fill = veg)) + geom_density(alpha = 0.2)
p <- ggplotly(p)
p
# devtools::install_github('hadley/ggplot2') # uncomment and run code to install the dev version of ggplot2.
library(plotly)
carrots <- data.frame(length = rnorm(100000, 6, 2))
cukes <- data.frame(length = rnorm(50000, 7, 2.5))
#Now, combine your two dataframes into one.  First make a new column in each.
carrots$veg <- 'carrot'
cukes$veg <- 'cuke'
#and combine into your new data frame vegLengths
vegLengths <- rbind(carrots, cukes)
#now make your lovely plot
p <- ggplot(vegLengths, aes(length, fill = veg)) + geom_density(alpha = 0.2)
p <- ggplotly(p)
p
knitr::opts_chunk$set(echo = TRUE)
# devtools::install_github('hadley/ggplot2') # uncomment and run code to install the dev version of ggplot2.
library(plotly)
ed_sheeran_norms <- data.frame(length = unlist(list_dist_mat_ed))
beyonce_norms <- data.frame(length = unlist(list_dist_mat_bey))
#Now, combine your two dataframes into one.  First make a new column in each.
ed_sheeran_norms$Artist <- 'Ed Sheeran'
beyonce_norms$Artist <- 'Beyonce'
#and combine into your new data frame vegLengths
artist_norms <- rbind(ed_sheeran_norms, beyonce_norms)
#now make your lovely plot
p <- ggplot(artist_norms, aes(length, fill = Artist)) + geom_density(alpha = 0.2)
p <- ggplotly(p)
p
# devtools::install_github('hadley/ggplot2') # uncomment and run code to install the dev version of ggplot2.
library(plotly)
ed_sheeran_norms <- data.frame(normDist = unlist(list_dist_mat_ed))
beyonce_norms <- data.frame(normDist = unlist(list_dist_mat_bey))
#Now, combine your two dataframes into one.  First make a new column in each.
ed_sheeran_norms$Artist <- 'Ed Sheeran'
beyonce_norms$Artist <- 'Beyonce'
#and combine into your new data frame vegLengths
artist_norms <- rbind(ed_sheeran_norms, beyonce_norms)
#now make your lovely plot
p <- ggplot(artist_norms, aes(normDist, fill = Artist)) + geom_density(alpha = 0.2)
p <- ggplotly(p)
p
# devtools::install_github('hadley/ggplot2') # uncomment and run code to install the dev version of ggplot2.
library(plotly)
ed_sheeran_norms <- data.frame(normDist = unlist(list_dist_mat_ed))
beyonce_norms <- data.frame(normDist = unlist(list_dist_mat_bey))
coldplay_norms <- data.frame(normDist = unlist(list_dist_mat_cold))
#Now, combine your two dataframes into one.  First make a new column in each.
ed_sheeran_norms$Artist <- 'Ed Sheeran'
beyonce_norms$Artist <- 'Beyonce'
coldplay_norms$Artst <- 'Coldplay'
#and combine into your new data frame vegLengths
artist_norms <- rbind(ed_sheeran_norms, beyonce_norms, coldplay_norms)
# devtools::install_github('hadley/ggplot2') # uncomment and run code to install the dev version of ggplot2.
library(plotly)
ed_sheeran_norms <- data.frame(normDist = unlist(list_dist_mat_ed))
beyonce_norms <- data.frame(normDist = unlist(list_dist_mat_bey))
coldplay_norms <- data.frame(normDist = unlist(list_dist_mat_cold))
#Now, combine your two dataframes into one.  First make a new column in each.
ed_sheeran_norms$Artist <- 'Ed Sheeran'
beyonce_norms$Artist <- 'Beyonce'
coldplay_norms$Artst <- 'Coldplay'
#and combine into your new data frame vegLengths
artist_norms <- rbind(ed_sheeran_norms, beyonce_norms, coldplay_norms)
rm(artist_norms)
# devtools::install_github('hadley/ggplot2') # uncomment and run code to install the dev version of ggplot2.
library(plotly)
ed_sheeran_norms <- data.frame(normDist = unlist(list_dist_mat_ed))
beyonce_norms <- data.frame(normDist = unlist(list_dist_mat_bey))
coldplay_norms <- data.frame(normDist = unlist(list_dist_mat_cold))
#Now, combine your two dataframes into one.  First make a new column in each.
ed_sheeran_norms$Artist <- 'Ed Sheeran'
beyonce_norms$Artist <- 'Beyonce'
coldplay_norms$Artst <- 'Coldplay'
# rm(artist_norms)
#and combine into your new data frame vegLengths
artist_norms <- rbind(ed_sheeran_norms, beyonce_norms, coldplay_norms)
# devtools::install_github('hadley/ggplot2') # uncomment and run code to install the dev version of ggplot2.
library(plotly)
ed_sheeran_norms <- data.frame(normDist = unlist(list_dist_mat_ed))
beyonce_norms <- data.frame(normDist = unlist(list_dist_mat_bey))
coldplay_norms <- data.frame(normDist = unlist(list_dist_mat_cold))
#Now, combine your two dataframes into one.  First make a new column in each.
ed_sheeran_norms$Artist <- 'Ed Sheeran'
beyonce_norms$Artist <- 'Beyonce'
coldplay_norms$Artist <- 'Coldplay'
# rm(artist_norms)
#and combine into your new data frame vegLengths
artist_norms <- rbind(ed_sheeran_norms, beyonce_norms, coldplay_norms)
#now make your lovely plot
p <- ggplot(artist_norms, aes(normDist, fill = Artist)) + geom_density(alpha = 0.2)
p <- ggplotly(p)
p
# devtools::install_github('hadley/ggplot2') # uncomment and run code to install the dev version of ggplot2.
library(plotly)
ed_sheeran_norms <- data.frame(normDist = unlist(list_dist_mat_ed))
beyonce_norms <- data.frame(normDist = unlist(list_dist_mat_bey))
coldplay_norms <- data.frame(normDist = unlist(list_dist_mat_cold))
maroon5_norms <- data.frame(normDist = unlist(list_dist_mat_mar))
bru_norms <- data.frame(normDist = unlist(list_dist_mat_bru))
#Now, combine your two dataframes into one.  First make a new column in each.
ed_sheeran_norms$Artist <- 'Ed Sheeran'
beyonce_norms$Artist <- 'Beyonce'
coldplay_norms$Artist <- 'Coldplay'
maroon5_norms$Artist <- 'Maroon 5'
bruno_norms$Artist <- 'Bruno Mars'
# devtools::install_github('hadley/ggplot2') # uncomment and run code to install the dev version of ggplot2.
library(plotly)
ed_sheeran_norms <- data.frame(normDist = unlist(list_dist_mat_ed))
beyonce_norms <- data.frame(normDist = unlist(list_dist_mat_bey))
coldplay_norms <- data.frame(normDist = unlist(list_dist_mat_cold))
maroon5_norms <- data.frame(normDist = unlist(list_dist_mat_mar))
bruno_norms <- data.frame(normDist = unlist(list_dist_mat_bru))
#Now, combine your two dataframes into one.  First make a new column in each.
ed_sheeran_norms$Artist <- 'Ed Sheeran'
beyonce_norms$Artist <- 'Beyonce'
coldplay_norms$Artist <- 'Coldplay'
maroon5_norms$Artist <- 'Maroon 5'
bruno_norms$Artist <- 'Bruno Mars'
# rm(artist_norms)
#and combine into your new data frame vegLengths
artist_norms <- rbind(ed_sheeran_norms, beyonce_norms,
coldplay_norms, maroon5_norms, bruno_norms)
#now make your lovely plot
p <- ggplot(artist_norms, aes(normDist, fill = Artist)) + geom_density(alpha = 0.2)
p <- ggplotly(p)
p
htmlwidgets::saveWidget(as.widget(p), "01-density_plot_overlap.html")
htmlwidgets::saveWidget(as.widget(p), "01-density_plot_overlap.html")
# devtools::install_github('hadley/ggplot2') # uncomment and run code to install the dev version of ggplot2.
library(plotly)
ed_sheeran_norms <- data.frame(normDist = unlist(list_dist_mat_ed))
beyonce_norms <- data.frame(normDist = unlist(list_dist_mat_bey))
coldplay_norms <- data.frame(normDist = unlist(list_dist_mat_cold))
maroon5_norms <- data.frame(normDist = unlist(list_dist_mat_mar))
bruno_norms <- data.frame(normDist = unlist(list_dist_mat_bru))
# combine your dataframes into one.  First make a new column in each.
ed_sheeran_norms$Artist <- 'Ed Sheeran'
beyonce_norms$Artist <- 'Beyonce'
coldplay_norms$Artist <- 'Coldplay'
maroon5_norms$Artist <- 'Maroon 5'
bruno_norms$Artist <- 'Bruno Mars'
# combine into your new data frame artist_norms.
artist_norms <- rbind(ed_sheeran_norms, beyonce_norms,
coldplay_norms, maroon5_norms, bruno_norms)
# create our awesome plot.
p.1 <- ggplot(artist_norms, aes(normDist, fill = Artist)) + geom_density(alpha = 0.2)
p.1 <- ggplotly(p.1)
p.1
p.2 <- ggplot(artist_norms, aes(x = normDist)) +
geom_density(aes(fill = Artist), kernel = Artist) +
facet_grid(~Artist) +
ggtitle("Kernel density estimate with Facets")
p.2 <- ggplot(artist_norms, aes(x = normDist)) +
geom_density(aes(fill = Artist), kernel = Artist) +
facet_grid(~Artist) +
ggtitle("Kernel density estimate with Facets")
p.2 <- ggplot(artist_norms, aes(x = normDist)) +
geom_density(aes(fill = Artist)) +
facet_grid(~Artist) +
ggtitle("Kernel density estimate with Facets")
p.2 <- ggplotly(p.2)
p.2
p.2 <- ggplot(artist_norms, aes(x = normDist)) +
geom_density(aes(fill = Artist)) +
facet_grid(~Artist) +
ggtitle("Normal Distance density plots by Artits")
p.2 <- ggplotly(p.2)
p.2
# devtools::install_github('hadley/ggplot2') # uncomment and run code to install the dev version of ggplot2.
library(plotly)
ed_sheeran_norms <- data.frame(normDist = unlist(list_dist_mat_ed))
beyonce_norms <- data.frame(normDist = unlist(list_dist_mat_bey))
coldplay_norms <- data.frame(normDist = unlist(list_dist_mat_cold))
maroon5_norms <- data.frame(normDist = unlist(list_dist_mat_mar))
bruno_norms <- data.frame(normDist = unlist(list_dist_mat_bru))
# combine your dataframes into one.  First make a new column in each.
ed_sheeran_norms$Artist <- 'Ed Sheeran'
beyonce_norms$Artist <- 'Beyonce'
coldplay_norms$Artist <- 'Coldplay'
maroon5_norms$Artist <- 'Maroon 5'
bruno_norms$Artist <- 'Bruno Mars'
# combine into your new data frame artist_norms.
artist_norms <- rbind(ed_sheeran_norms, beyonce_norms,
coldplay_norms, maroon5_norms, bruno_norms)
# create our awesome plot.
p.1 <- ggplot(artist_norms, aes(normDist, fill = Artist)) + geom_density(alpha = 0.2)
p.1 <- ggplotly(p.1)
p.1
p.2 <- ggplot(artist_norms, aes(x = normDist)) +
geom_density(aes(fill = Artist)) +
facet_grid(~Artist) +
ggtitle("Normal Distance density plots by Artits")
p.2 <- ggplotly(p.2)
p.2
htmlwidgets::saveWidget(as.widget(p.2), "02-density_plot_non-overlap.html")
p.2 <- ggplot(artist_norms, aes(x = normDist)) +
geom_density(aes(fill = Artist)) +
facet_grid(~Artist) +
ggtitle("Normal Distance density plots by Artits")
p.2 <- ggplotly(p.2)
p.2
htmlwidgets::saveWidget(as.widget(p.2), "02-density_plot_non-overlap.html")
p.2 <- ggplot(artist_norms, aes(x = normDist)) +
geom_density(aes(fill = Artist)) +
facet_grid(~Artist) +
ggtitle("Normal Distance density plots by Artits")
p.2 <- ggplotly(p.2)
p.2
htmlwidgets::saveWidget(as.widget(p.2), "02-density_plot_non-overlap.html")
# devtools::install_github('hadley/ggplot2') # uncomment and run code to install the dev version of ggplot2.
library(plotly)
ed_sheeran_norms <- data.frame(normDist = unlist(list_dist_mat_ed))
beyonce_norms <- data.frame(normDist = unlist(list_dist_mat_bey))
coldplay_norms <- data.frame(normDist = unlist(list_dist_mat_cold))
maroon5_norms <- data.frame(normDist = unlist(list_dist_mat_mar))
bruno_norms <- data.frame(normDist = unlist(list_dist_mat_bru))
# combine your dataframes into one.  First make a new column in each.
ed_sheeran_norms$Artist <- 'Ed Sheeran'
beyonce_norms$Artist <- 'Beyonce'
coldplay_norms$Artist <- 'Coldplay'
maroon5_norms$Artist <- 'Maroon 5'
bruno_norms$Artist <- 'Bruno Mars'
# combine into your new data frame artist_norms.
artist_norms <- rbind(ed_sheeran_norms, beyonce_norms,
coldplay_norms, maroon5_norms, bruno_norms)
# create our awesome plot.
p.1 <- ggplot(artist_norms, aes(normDist, fill = Artist)) + geom_density(alpha = 0.2)
p.1 <- ggplotly(p.1)
p.1
p.3 <- plot_ly(artist_norms, x = ~normDist, color = ~Artist, type = "box")
p.3
p.3 <- plot_ly(artist_norms,
x = ~normDist,
color = ~Artist,
type = "box")
p.3
htmlwidgets::saveWidget(as.widget(p.3), "03-artists_box_plots.html")
p.3 <- plot_ly(artist_norms,
x = ~normDist,
color = ~Artist,
type = "box")
p.3
htmlwidgets::saveWidget(as_widget(p.3), "03-artists_box_plots.html")
p.2 <- ggplot(artist_norms, aes(x = normDist)) +
geom_density(aes(fill = Artist)) +
facet_grid(~Artist) +
ggtitle("Normal Distance density plots by Artists")
p.2 <- ggplotly(p.2)
p.2
# htmlwidgets::saveWidget(as_widget(p.2), "02-density_plot_non-overlap.html")
test.txt <- read.table("./output/list_dist_mat_ed.txt", header=T)
test.txt <- read.table("./output/list_dist_mat_ed.txt", header=F)
x <- scan("./output/list_dist_mat_ed.txt", what="", sep="\n")
# Separate elements by one or more whitepace
y <- strsplit(x, "[[:space:]]+")
# Extract the first vector element and set it as the list element name
names(y) <- sapply(y, `[[`, 1)
#names(y) <- sapply(y, function(x) x[[1]]) # same as above
# Remove the first vector element from each list element
y <- lapply(y, `[`, -1)
x <- scan("./output/list_dist_mat_ed.txt", what="", sep="\n")
# Separate elements by one or more whitepace
y <- strsplit(x, "[[:space:]]+")
# Extract the first vector element and set it as the list element name
names(y) <- sapply(y, `[[`, 1)
#names(y) <- sapply(y, function(x) x[[1]]) # same as above
# Remove the first vector element from each list element
y <- lapply(y, `[`, -1)
y
x <- scan("./output/list_dist_mat_ed.txt", what="", sep="\n")
# Separate elements by one or more whitepace
y <- strsplit(x, "[[:space:]]+")
y
y[[1]]
y[[1]][1]
y <- strsplit(x, "[[:space:]]+")
x <- scan("./output/list_dist_mat_ed.txt", what="", sep="\n")
# Separate elements by one or more whitepace
y <- strsplit(x, "[[:space:]]+")
x <- scan("./output/list_dist_mat_ed.txt", what="", sep="\n")
# Separate elements by one or more whitepace
y <- strsplit(x, "[[:space:]]+")
y
srt(y[[1]])
str(y[[1]])
str(y[[2]])
str(y[[1]])
as.double(y[[1]])
str(as.double(y[[1]]))
list(as.double(y[[1]]), na.rm = TRUE)
list(as.double(y[[1]]))
inp_dist_mat_ed <- as.double(y[[1]])
inp_dist_mat_ed = inp_dist_mat_ed[-which(sapply(inp_dist_mat_ed, is.na))]
inp_dist_mat_ed
str(y)
inp_dist_mat_ed <- vec_process_line(y)
process_line <- function(line){
inp_dist_mat <- as.double(line)
inp_dist_mat = inp_dist_mat[-which(sapply(inp_dist_mat, is.na))]
return(inp_dist_mat)
}
vec_process_line <- Vectorize(process_line)
inp_dist_mat_ed <- vec_process_line(y)
inp_dist_mat_ed <- vec_process_line(y)
inp_dist_mat_ed
process_line <- function(line){
inp_dist_mat <- as.double(line)
inp_dist_mat = inp_dist_mat[-which(sapply(inp_dist_mat, is.na))]
return(inp_dist_mat)
}
vec_process_line <- Vectorize(process_line)
read_norm_data <- function(file){
file <- scan(file, what="", sep="\n")
# Separate elements by one or more whitepace
file <- strsplit(x, "[[:space:]]+")
inp_dist_mat_ed <- vec_process_line(file)
}
inp_dist_mat_ed <- read_norm_data("./output/list_dist_mat_ed.txt")
inp_dist_mat_ed
process_line <- function(line){
inp_dist_mat <- as.double(line)
inp_dist_mat = inp_dist_mat[-which(sapply(inp_dist_mat, is.na))]
return(inp_dist_mat)
}
vec_process_line <- Vectorize(process_line)
read_norm_data <- function(file){
file <- scan(file, what="", sep="\n")
# Separate elements by one or more whitepace
file <- strsplit(x, "[[:space:]]+")
inp_dist_mat_ed <- vec_process_line(file)
}
inp_dist_mat_ed <- read_norm_data("./output/list_dist_mat_ed.txt")
inp_dist_mat_ed
process_line <- function(line){
inp_dist_mat <- as.double(line)
inp_dist_mat = inp_dist_mat[-which(sapply(inp_dist_mat, is.na))]
return(inp_dist_mat)
}
vec_process_line <- Vectorize(process_line)
read_norm_data <- function(file){
file <- scan(file, what="", sep="\n")
# Separate elements by one or more whitepace
file <- strsplit(x, "[[:space:]]+")
inp_dist_mat_ed <- vec_process_line(file)
}
inp_dist_mat_ed <- read_norm_data("./output/list_dist_mat_ed.txt")
inp_dist_mat_ed
install.packages("GGally")
library(GGally)
ggnet2(network(rgraph(10, tprob = 0.25), directed = TRUE), arrow.size = 12)
ggnet2(network(mean_mat_bru), directed = TRUE), arrow.size = 12)
# install.packages("GGally")
library(GGally)
ggnet2(network(mean_mat_bru, directed = TRUE),
arrow.size = 12, arrow.gap = 0.025)
# install.packages("GGally")
library(GGally)
net <- as.network(mean_mat_bru, # the network object
directed = TRUE, # specify whether the network is directed
loops = TRUE, # do we allow self ties (should not allow them)
matrix.type = "adjacency" # the type of input
)
ggnet2(net, arrow.size = 12, arrow.gap = 0.025)
# install.packages("GGally")
library(GGally)
net <- as.network(mean_mat_bru, # the network object
directed = TRUE, # specify whether the network is directed
loops = FALSE, # do we allow self ties (should not allow them)
matrix.type = "adjacency" # the type of input
)
ggnet2(net, arrow.size = 12, arrow.gap = 0.025)
# install.packages("GGally")
library(GGally)
net <- as.network(mean_mat_bru, # the network object
directed = TRUE, # specify whether the network is directed
loops = FALSE, # do we allow self ties (should not allow them)
matrix.type = "adjacency" # the type of input
)
ggnet2(net, arrow.size = 12, arrow.gap = 0.025)
(igraph)
install.packages("igraph")
library(igraph)
net <- graph_from_adjacency_matrix(mean_mat_bru, mode = "directed",
weighted = TRUE, diag = TRUE,add.colnames = NULL, add.rownames = NA)
ggnet2(net, arrow.size = 12, arrow.gap = 0.025)
net <- graph_from_adjacency_matrix(mean_mat_bru, mode = "directed",
weighted = TRUE, diag = TRUE)
ggnet2(net, arrow.size = 12, arrow.gap = 0.025)
summary(net)
sentimentStates <- c("negative", "neutral", "positive")
byRow <- TRUE
sentimentMatrix <- matrix(data = mean_mat_bru,
byrow = TRUE,
nrow = 3,
dimnames = list(sentimentStates,
sentimentStates))
mcSentiment <- new("markovchain", states = setimentStates, byrow = byRow)
sentimentMatrix <- matrix(data = mean_mat_bru,
byrow = TRUE,
nrow = 3,
dimnames = list(sentimentStates,
sentimentStates))
transitionMatrix = sentimentMatrix
sentimentStates <- c("negative", "neutral", "positive")
byRow <- TRUE
sentimentMatrix <- matrix(data = mean_mat_bru,
byrow = TRUE,
nrow = 3,
dimnames = list(sentimentStates,
sentimentStates))
sentimentMatrix
library(markovchain)
sentimentStates <- c("negative", "neutral", "positive")
byRow <- TRUE
sentimentMatrix <- matrix(data = mean_mat_bru,
byrow = TRUE,
nrow = 3,
dimnames = list(sentimentStates,
sentimentStates))
sentimentMatrix
mcSentiment <- new("markovchain", states = sentimentStates, byrow = byRow,
transitionMatrix = sentimentMatrix, name = "Sentiment")
sentimentStates <- c("negative", "neutral", "positive")
byRow <- TRUE
sentimentMatrix <- matrix(data = mean_mat_bru,
nrow = 3,
dimnames = list(sentimentStates,
sentimentStates))
sentimentMatrix
mcSentiment <- new("markovchain", states = sentimentStates, byrow = byRow,
transitionMatrix = sentimentMatrix, name = "Sentiment")
plot(sentimentMatrix)
mcSentiment <- new("adjacency", states = sentimentStates, byrow = byRow,
transitionMatrix = sentimentMatrix, name = "Sentiment")
graph_from_adjacency_matrix(mean_mat_bru, mode = "directed", weighted = TRUE, diag = TRUE)
graph_from_adjacency_matrix(mean_mat_bru, mode = "directed", weighted = TRUE, diag = TRUE)
plot(g)
g <- graph_from_adjacency_matrix(mean_mat_bru, mode = "directed", weighted = TRUE, diag = TRUE)
plot(g)
g <- graph_from_adjacency_matrix(mcSentiment, mode = "directed", weighted = TRUE, diag = TRUE)
plot(g)
0.125 - 0.125
0.125 + 0.125
0.25 / 2
1-0.125
0.875 / 2
